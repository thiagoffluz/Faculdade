package com.projetoriblets.view;

import java.awt.Frame;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.JDialog;
import javax.swing.JOptionPane;

/**
 *
 * @author alciran
 */
public class FormPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form FormPrincipal
     */
    public FormPrincipal() {
        initComponents();
    }

    public class QuadroRiblets extends Frame{
        
        private int tamanho;
        private int altura;
        private int angulo;
        private int distanciaDR;
        private int distanciaPrimeiro;
       

        public QuadroRiblets(int tamanho, int altura, int angulo, int distanciaDR, int distanciaPrimeiro) {
            this.tamanho = tamanho;
            this.altura = altura;
            this.angulo = angulo;
            this.distanciaDR = distanciaDR;
            this.distanciaPrimeiro = distanciaPrimeiro;
            
            //Enable close window
            addWindowListener(new WindowAdapter() {
                public void windowClosing(WindowEvent e){
                    dispose();
                }
            });
        }
        
        public int getTamanho() {
            return tamanho;
        }

        public void setTamanho(int tamanho) {
            this.tamanho = tamanho;
        }

        public int getAltura() {
            return altura;
        }

        public void setAltura(int altura) {
            this.altura = altura;
        }

        public int getAngulo() {
            return angulo;
        }

        public void setAngulo(int angulo) {
            this.angulo = angulo;
        }
        
        public int getDistanciaDR() {
            return distanciaDR;
        }

        public void setDistanciaDR(int distanciaDR) {
            this.distanciaDR = distanciaDR;
        }

        public int getDistanciaPrimeiro() {
            return distanciaPrimeiro;
        }

        public void setDistanciaPrimeiro(int distanciaPrimeiro) {
            this.distanciaPrimeiro = distanciaPrimeiro;
        }
        
    }
     
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnDesenhar = new javax.swing.JButton();
        txtFldTamanho = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtFldDistanciaEntreRiblets = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtFldDistanciaPrimeiro = new javax.swing.JTextField();
        checkMetadeDR = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        txtFldLargura = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtFldAltura = new javax.swing.JTextField();
        MenuBarPrincipal = new javax.swing.JMenuBar();
        menuOpcoes = new javax.swing.JMenu();
        menuGerarRiblets = new javax.swing.JMenuItem();
        menuAjuda = new javax.swing.JMenu();
        menuAjudaInserirDados = new javax.swing.JMenuItem();
        menuSobre = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Riblets");

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setText("Insira todas as informações para desenhar o(s) Riblet(s)");

        jLabel2.setText("Ângulo do Riblet: ");

        btnDesenhar.setLabel("Desenhar");
        btnDesenhar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDesenharActionPerformed(evt);
            }
        });

        txtFldTamanho.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtFldTamanhoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFldTamanhoFocusLost(evt);
            }
        });
        txtFldTamanho.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                txtFldTamanhoInputMethodTextChanged(evt);
            }
        });
        txtFldTamanho.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFldTamanhoActionPerformed(evt);
            }
        });
        txtFldTamanho.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                txtFldTamanhoPropertyChange(evt);
            }
        });
        txtFldTamanho.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtFldTamanhoKeyPressed(evt);
            }
        });

        jLabel3.setText("Distância entre os centros dos Riblets ( DR ):");

        txtFldDistanciaEntreRiblets.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtFldDistanciaEntreRibletsFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFldDistanciaEntreRibletsFocusLost(evt);
            }
        });

        jLabel4.setText("Distância de início do primeiro Riblets ( DR0 ):");

        txtFldDistanciaPrimeiro.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtFldDistanciaPrimeiroFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFldDistanciaPrimeiroFocusLost(evt);
            }
        });

        checkMetadeDR.setSelected(true);
        checkMetadeDR.setText("1/2 DR");
        checkMetadeDR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkMetadeDRActionPerformed(evt);
            }
        });

        jLabel5.setText("Tamanho da Amostra ( T ):");

        txtFldLargura.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtFldLarguraFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFldLarguraFocusLost(evt);
            }
        });
        txtFldLargura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFldLarguraActionPerformed(evt);
            }
        });

        jLabel6.setText("Altura do Riblet: ( h ):");

        txtFldAltura.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtFldAlturaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFldAlturaFocusLost(evt);
            }
        });

        menuOpcoes.setText("Opções");

        menuGerarRiblets.setText("Gerar Riblets");
        menuGerarRiblets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuGerarRibletsActionPerformed(evt);
            }
        });
        menuOpcoes.add(menuGerarRiblets);

        MenuBarPrincipal.add(menuOpcoes);

        menuAjuda.setText("Ajuda");
        menuAjuda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAjudaActionPerformed(evt);
            }
        });

        menuAjudaInserirDados.setText("Inserir os Dados");
        menuAjudaInserirDados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAjudaInserirDadosActionPerformed(evt);
            }
        });
        menuAjuda.add(menuAjudaInserirDados);

        menuSobre.setText("Sobre");
        menuSobre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSobreActionPerformed(evt);
            }
        });
        menuAjuda.add(menuSobre);

        MenuBarPrincipal.add(menuAjuda);

        setJMenuBar(MenuBarPrincipal);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(288, 288, 288)
                        .addComponent(btnDesenhar))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtFldAltura, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(txtFldDistanciaPrimeiro, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(checkMetadeDR))
                                .addComponent(txtFldTamanho, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtFldDistanciaEntreRiblets, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(70, 70, 70))
                            .addComponent(txtFldLargura, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(74, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel1)
                .addGap(59, 59, 59)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtFldTamanho, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFldAltura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtFldLargura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtFldDistanciaEntreRiblets, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(checkMetadeDR)
                    .addComponent(txtFldDistanciaPrimeiro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 74, Short.MAX_VALUE)
                .addComponent(btnDesenhar)
                .addGap(81, 81, 81))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuGerarRibletsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuGerarRibletsActionPerformed
        
        
    }//GEN-LAST:event_menuGerarRibletsActionPerformed

    private void menuAjudaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAjudaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_menuAjudaActionPerformed

    private void menuSobreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSobreActionPerformed
        FormAjudaSobre form = new FormAjudaSobre(this, true);
        form.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
        form.setTitle("Sobre");
        form.setLocationRelativeTo(null);
        form.setResizable(false);
        form.setVisible(true);
    }//GEN-LAST:event_menuSobreActionPerformed

    private void menuAjudaInserirDadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAjudaInserirDadosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_menuAjudaInserirDadosActionPerformed

    private void btnDesenharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDesenharActionPerformed
        if( txtFldLargura.getText().trim().isEmpty() ||
            txtFldAltura.getText().trim().isEmpty() ||
            txtFldDistanciaEntreRiblets.getText().trim().isEmpty() ||
            txtFldDistanciaPrimeiro.getText().trim().isEmpty() ||
            txtFldTamanho.getText().trim().isEmpty() ){
            
            String[] opcoes = {"Fechar"};
                JOptionPane.showOptionDialog(null, 
                    "Por favor preencha todos os campos!", "Campos em branco"
                        , JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, opcoes, opcoes[0]);
        }else {
            int tamanho = Integer.parseInt(txtFldTamanho.getText());
            int largura = Integer.parseInt(txtFldLargura.getText());
            int distanciaDR0 = Integer.parseInt(txtFldDistanciaPrimeiro.getText());
            if(tamanho < (distanciaDR0 + largura/2)){
                String[] opcoes = {"Fechar"};
                JOptionPane.showOptionDialog(null
                        , "O tamanho (T) deve ser maior que a soma entre: a distância do primeiro Riblet (DR0) e a metade da largura (L) do Riblet!"
                        , "Erro tamanho T", JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, opcoes, opcoes[0]);
                txtFldTamanho.setText("");
            }else{
                int distanciaRB = Integer.parseInt(txtFldDistanciaEntreRiblets.getText());               
                if(distanciaRB <= largura/2){
                    String[] opcoes = {"Fechar"};
                    JOptionPane.showOptionDialog(null, "A distância entre os centros do Riblet (DR) deve ser maior que a largura (L) do Riblet!"
                            , "Erro tamanho DR", JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, opcoes, opcoes[0]);
                    txtFldDistanciaEntreRiblets.setText("");

                }else{
                    int altura = Integer.parseInt(txtFldAltura.getText());
                            
                    QuadroRiblets f = new QuadroRiblets(largura, altura, distanciaDR0, distanciaRB, tamanho);
                    f.setTitle("Desenho dos Riblets em 2D");
                    f.setSize(800,600);    
                    f.setVisible(true); 

                    f.setLayout(null);  
                    f.setVisible(true);
                }
            }
            
            
            
            
            
        }
        
    }//GEN-LAST:event_btnDesenharActionPerformed

    private void txtFldTamanhoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFldTamanhoKeyPressed
        
    }//GEN-LAST:event_txtFldTamanhoKeyPressed

    private void txtFldTamanhoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFldTamanhoFocusGained
        txtFldTamanho.addKeyListener(new KeyListener(){
            public void keyTyped(KeyEvent e) {
                if (!((e.getKeyChar() >= KeyEvent.VK_0 && 
                       e.getKeyChar() <= KeyEvent.VK_9) || 
                      (e.getKeyChar() == KeyEvent.VK_ENTER || 
                       e.getKeyChar() == KeyEvent.VK_SPACE || 
                       e.getKeyChar() == KeyEvent.VK_BACK_SPACE))) {
                    e.consume();
                }
                
            }
            
            public void keyPressed(KeyEvent e) {
            }

            public void keyReleased(KeyEvent e) {
            }
        });
    }//GEN-LAST:event_txtFldTamanhoFocusGained

    private void txtFldLarguraFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFldLarguraFocusGained
        txtFldLargura.addKeyListener(new KeyListener(){
            public void keyTyped(KeyEvent e) {
                if (!((e.getKeyChar() >= KeyEvent.VK_0 && 
                       e.getKeyChar() <= KeyEvent.VK_9) || 
                      (e.getKeyChar() == KeyEvent.VK_ENTER || 
                       e.getKeyChar() == KeyEvent.VK_SPACE || 
                       e.getKeyChar() == KeyEvent.VK_BACK_SPACE))) {
                    e.consume();
                }
                
            }
            
            public void keyPressed(KeyEvent e) {
            }

            public void keyReleased(KeyEvent e) {
            }
        });
    }//GEN-LAST:event_txtFldLarguraFocusGained

    private void txtFldAlturaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFldAlturaFocusGained
        txtFldAltura.addKeyListener(new KeyListener(){
            public void keyTyped(KeyEvent e) {
                if (!((e.getKeyChar() >= KeyEvent.VK_0 && 
                       e.getKeyChar() <= KeyEvent.VK_9) || 
                      (e.getKeyChar() == KeyEvent.VK_ENTER || 
                       e.getKeyChar() == KeyEvent.VK_SPACE || 
                       e.getKeyChar() == KeyEvent.VK_BACK_SPACE))) {
                    e.consume();
                }
                
            }
            
            public void keyPressed(KeyEvent e) {
            }

            public void keyReleased(KeyEvent e) {
            }
        });
    }//GEN-LAST:event_txtFldAlturaFocusGained

    private void txtFldDistanciaEntreRibletsFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFldDistanciaEntreRibletsFocusGained
        txtFldDistanciaEntreRiblets.addKeyListener(new KeyListener(){
            public void keyTyped(KeyEvent e) {
                if (!((e.getKeyChar() >= KeyEvent.VK_0 && 
                       e.getKeyChar() <= KeyEvent.VK_9) || 
                      (e.getKeyChar() == KeyEvent.VK_ENTER || 
                       e.getKeyChar() == KeyEvent.VK_SPACE || 
                       e.getKeyChar() == KeyEvent.VK_BACK_SPACE))) {
                    e.consume();
                }
                
            }
            
            public void keyPressed(KeyEvent e) {
            }

            public void keyReleased(KeyEvent e) {
            }
        });
    }//GEN-LAST:event_txtFldDistanciaEntreRibletsFocusGained

    private void txtFldDistanciaPrimeiroFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFldDistanciaPrimeiroFocusGained
        txtFldDistanciaPrimeiro.addKeyListener(new KeyListener(){
            public void keyTyped(KeyEvent e) {
                if (!((e.getKeyChar() >= KeyEvent.VK_0 && 
                       e.getKeyChar() <= KeyEvent.VK_9) || 
                      (e.getKeyChar() == KeyEvent.VK_ENTER || 
                       e.getKeyChar() == KeyEvent.VK_SPACE || 
                       e.getKeyChar() == KeyEvent.VK_BACK_SPACE))) {
                    e.consume();
                }
                
            }
            
            public void keyPressed(KeyEvent e) {
            }

            public void keyReleased(KeyEvent e) {
            }
        });
    }//GEN-LAST:event_txtFldDistanciaPrimeiroFocusGained

    private void txtFldDistanciaEntreRibletsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFldDistanciaEntreRibletsFocusLost
        if(!txtFldDistanciaEntreRiblets.getText().trim().isEmpty()){
            int distanciaRB = Integer.parseInt(txtFldDistanciaEntreRiblets.getText());
            int largura = Integer.parseInt(txtFldLargura.getText());
            if(distanciaRB <= largura){
                String[] opcoes = {"Fechar"};
                JOptionPane.showOptionDialog(null
                        , "A distância entre os centros do Riblet (DR) deve ser maior que a largura (L) do Riblet!"
                        , "Erro tamanho DR", JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, opcoes, opcoes[0]);
                txtFldDistanciaEntreRiblets.setText("");
            }else{
                int valorDR  = Integer.parseInt(txtFldDistanciaEntreRiblets.getText());
                if(checkMetadeDR.isSelected()){
                    if(valorDR % 2 != 0) valorDR = (valorDR/2)+1;
                    txtFldDistanciaPrimeiro.setText(String.valueOf(valorDR/2));
                }
            }
        }
        
        
        
    }//GEN-LAST:event_txtFldDistanciaEntreRibletsFocusLost

    private void checkMetadeDRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkMetadeDRActionPerformed
        
        if(checkMetadeDR.isSelected()){
            if(!txtFldDistanciaEntreRiblets.getText().trim().isEmpty()){
                int valorDR  = Integer.parseInt(txtFldDistanciaEntreRiblets.getText());
                txtFldDistanciaPrimeiro.setText(String.valueOf(valorDR/2));
            }
        }
    }//GEN-LAST:event_checkMetadeDRActionPerformed

    private void txtFldTamanhoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFldTamanhoActionPerformed
        
    }//GEN-LAST:event_txtFldTamanhoActionPerformed

    private void txtFldTamanhoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFldTamanhoFocusLost
        if(!txtFldTamanho.getText().trim().isEmpty()){
            int tamanho = Integer.parseInt(txtFldTamanho.getText());
            int largura = Integer.parseInt(txtFldLargura.getText());
            int distanciDR0 = Integer.parseInt(txtFldDistanciaPrimeiro.getText());
            if(tamanho < (distanciDR0 + largura/2)){
                String[] opcoes = {"Fechar"};
                JOptionPane.showOptionDialog(null
                        , "O tamanho (T) deve ser maior que a soma entre: a distância do primeiro Riblet (DR0) e a metade da largura (L) do Riblet!"
                        , "Erro tamanho T", JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, opcoes, opcoes[0]);
                txtFldTamanho.setText("");
            }
        }       
    }//GEN-LAST:event_txtFldTamanhoFocusLost

    private void txtFldTamanhoPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_txtFldTamanhoPropertyChange
        
    }//GEN-LAST:event_txtFldTamanhoPropertyChange

    private void txtFldTamanhoInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_txtFldTamanhoInputMethodTextChanged
         
    }//GEN-LAST:event_txtFldTamanhoInputMethodTextChanged

    private void txtFldLarguraFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFldLarguraFocusLost
        
    }//GEN-LAST:event_txtFldLarguraFocusLost

    private void txtFldDistanciaPrimeiroFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFldDistanciaPrimeiroFocusLost
        if(!txtFldDistanciaPrimeiro.getText().trim().isEmpty()){
            int distancia = Integer.parseInt(txtFldDistanciaPrimeiro.getText());
            int largura = Integer.parseInt(txtFldLargura.getText());
            if(distancia < largura/2){
                String[] opcoes = {"Fechar"};
                JOptionPane.showOptionDialog(null, 
                        "O tamanho da distância do primeiro Riblet (DR0) deve ser maior que a largura (L) do Riblet!"
                        , "Erro tamanho DR0", JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, opcoes, opcoes[0]);
                txtFldDistanciaPrimeiro.setText("");
            }
        }               
    }//GEN-LAST:event_txtFldDistanciaPrimeiroFocusLost

    private void txtFldAlturaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFldAlturaFocusLost
        if(!txtFldAltura.getText().trim().isEmpty()){  
            int altura = Integer.parseInt(txtFldAltura.getText());
            int largura = Integer.parseInt(txtFldLargura.getText());
            int minimo = largura / 5;            
            if(altura < minimo){
                String[] opcoes = {"Fechar"};
                JOptionPane.showOptionDialog(null
                        , "A Altura (h) deve ser 1/5 maior que a  largura (L) do Riblet!"
                        , "Erro tamanho h", JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, opcoes, opcoes[0]);
                txtFldAltura.setText("");
            }
        }
    }//GEN-LAST:event_txtFldAlturaFocusLost

    private void txtFldLarguraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFldLarguraActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFldLarguraActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new FormPrincipal().setVisible(true);
                FormPrincipal form = new FormPrincipal();
                //Iniciar a janela principal centralizada na tela.
                form.setLocationRelativeTo(null);
                form.setVisible(true);
            }
        }); 
        
        
    
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar MenuBarPrincipal;
    private javax.swing.JButton btnDesenhar;
    private javax.swing.JRadioButton checkMetadeDR;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu menuAjuda;
    private javax.swing.JMenuItem menuAjudaInserirDados;
    private javax.swing.JMenuItem menuGerarRiblets;
    private javax.swing.JMenu menuOpcoes;
    private javax.swing.JMenuItem menuSobre;
    private javax.swing.JTextField txtFldAltura;
    private javax.swing.JTextField txtFldDistanciaEntreRiblets;
    private javax.swing.JTextField txtFldDistanciaPrimeiro;
    private javax.swing.JTextField txtFldLargura;
    private javax.swing.JTextField txtFldTamanho;
    // End of variables declaration//GEN-END:variables
}
